Solution 2:(Using Stack- Accepted)

# Optimised Approach:

1) We will be using stack for it.

2) We will traverse the characters in the string one by one and compare with stack top,
if at any time stack.top()==currentCharacter then we pop the element from stack.

3) And at last we will form the answer string using the stack elements.

Let us simulate the process with the help of an eg:
string : abbaca
stack: empty

first iteration: 'a'
stack is empty so we will push 'a' to the stack,
stack: |a|

second iteration: 'b'
stack.top() is not equal to 'b',
so we will push 'b' to the stack.
stack: |b|a|

third iteration: 'b'
stack.top() is equal to 'b',
so we will pop the element from stack.
stack: |a|

fourth iteration: 'a'
stack.top() is equal to 'a',
so we will pop element from the stack.
stack: empty

Fifth iteration: 'c'
stack is empty
so we will push the element into the stack.
stack: |c|

Sixth iteration: 'a'
stack.top() is not equal to 'a',
so we will push 'a' to the stack.
stack: |a|c|

Now, we will pop all the elements from the stack and store them into the answer string,
ans = "ac"
as the elements are in reverse order and hence we need to reverse the ans,
reverse(ans)
ans="ca" (FINAL RESULT)

Time Complexity: O(N)
Space Complexity: O(N)
N: length of string

class Solution {
public:
    
    string removeDuplicates(string str) 
    {
        stack<char> s;
        for(auto i:str)
        {
            if(s.empty())
                s.push(i);
            else
            {
                if(s.top()==i)
                {
                    s.pop();
                }
                else
                    s.push(i);
            }
        }
        string ans;
        while(!s.empty())
            ans+=s.top(),s.pop();
        reverse(ans.begin(),ans.end());
        return ans;
    }
};

Solution 3:(Using String as Stack - Accepted)

It is just the simple modification of above code,
instead of using stack we can directly use the resultant string for performing pop and push operations.

class Solution {
public:
    
    string removeDuplicates(string str) 
    {
        string ans;
        for(auto i:str)
        {
            if(!ans.empty() and ans.back()==i)
                ans.pop_back();
            else
                ans.push_back(i);
        }
        return ans;
    }
};
