‚ú®INTUITION:

    A naive way to think about the solution is by using extra space and traversing through the array and adding elements into the other array.
    Approach for in-place solution:
        if we simply gather even elements at the starting and odd at the end, we will lose the actual elements
        To overcome this, we use two-pointers approach.
        A super simplified versionüòé of what the 4 cases will be while comparing:

            CASE 1: if left = odd and right = even

            Example: 1, 3, 2, 4

            if we compare 1 and 4 we have to follow 3 steps:

                swap 1 and 4: swap(leftElement, rightElement)
                increment left pointer: left++
                decrement right pointer: right--

            CASE 2: if left = even and right = odd

            Example: 4, 3, 2, 1

            they are already at their correct places so we just need to move pointers:

                increment left pointer: left++
                decrement right pointer: right--

            CASE 3: if left = even and right = even

            Example: 4, 3, 2, 6

            Left element is at its correct place but not the right one!

            So we need to wait for the right one to find its perfect odd matchü§ùüèª from left!

                increment left pointer: left++

            CASE 4: if left = odd and right = odd

            Example: 3, 2, 6, 5

            right element is at its correct place but not the left one!

            So we need to wait for the left one to find its perfect even matchü§ùüèª from right!

                decrement right pointer: right--
